FirebaseAccess quick reference documentation:

How to use FirebaseAccess.js:
	add the following
		<script type = "module">

		</script>

	Inside the module script add
		import {function1,function2,...} from "/FirebaseAccess.js"

		NOTE: depending on how the final project structure is done, change "/FirebaseAccess.js" to "/<subfolder>/Firebase.js"

Avalible Functions
	Inorder to maintain simplicity and avoid errors, a simple intermidary call functions were used (denoted with "export" with in the code).

	User-related functions:

		userAdd(string:UID, string:name, string:accessLevel, string:password)
			Creates a "User" in the user database

		userSearch(string:UID, function:callbackFunction)
			Fetches a single user based on a supplied UID. While the callbackFunction, typically be a display function, will operate on the result of the fetch

		userUpdate(string:UID, string:fieldToUpdate, string:newData)
			Updates a single feild of a user with some data

		userUpdateMany(string:UID, string[]:fieldsToUpdate, string[]:newData)
			Updates multiple feilds of a user with some data

		userDeleter(string:UID)
			Deletes a user from the database


	Entry Functionality:

		getKeywords(function:callbackFunction)
			fetches the list of avaible keywords and passes them as an array to the callbackFunction

		exhibitGetAll(function:callbackFunction)
			Fetches all exhibits in the database
			NOTE: callbackFunction is a function that expects an array that is denoted by {exhibit.id:[data],..., exhibit.id:[data]}

		exhibitQuerySearchAND(string:title, string:start year, string:end year, string:keywords, string:status, string:floor, function:callbackFunction)
			Uses a logical AND search to query the Exhibit database based on the provided parameters.
			NOTE: if the parameter is not being used in the search leave it as either "", null, or undefined
			NOTE: The callback function should expect an array of key-value pairs where the key is the Exhibit ID and the value is the corresponding data (for operating on this look at the function "displaySearch" in the example "HTML Firebase Structure Example.html").
			NOTE: the title string and the string of keywords should have no Punctuation ('.' ',' '!' ect)

		exhibitQuerySearchOR(string:title, string:start year, string:end year, string:keywords, string:status, string:floor, function:callbackFunction)
			Uses a logical OR search to query the Exhibit database based on the provided parameters.
			NOTE: if the parameter is not being used in the search leave it as either "", null, or undefined
			NOTE: The callback function should expect an array of key-value pairs where the key is the Exhibit ID and the value is the corresponding data (for operating on this look at the function "displaySearch" in the example "HTML Firebase Structure Example.html").
			NOTE: the title string and the string of keywords should have no Punctuation ('.' ',' '!' ect)

		exhibitAdd(string:ID, string:title, string:date, string:floor, File[]:images, string:discription, string:status, string[]:keywords)
			Ceates an entry in the "exhibit" database while uploading and linking supplied images

		exhibitSearch(string:ID, function:callbackFunction)
			Fetches a single exhibit from a supplied ID. While the callbackFunction, typically be a display function, will operate on the result of the fetch

		exhibitUpdate(string:ID, string:feildToUpdate, any:newData)
			Updates a single feild of a exhibitwith some data

		exhibitUpdateMany(string:UID, string[]:fieldsToUpdate, string[]:newData)
			Updates multiple feilds of a exhibitwith some data. Please ensure that fieldsToUpdate and newData arrays entries coorspond with eachother, otherwise when updating, data will populate the incorrect field.
			NOTE:if updating images, store the images in an array. And then insert the image array into the newData[]

		exhibitDelete(string:ID)
			Deletes an exhibitfrom the database

	Image Storage Functionality:

		addImage(File:image)
			uploads a image to the storage without linking to a entry

		getImage(string:fileName, function:callbackFunction)
			fetches a image based on file name (including '.png', '.jpg', 'jpeg') and then passes it into the callbackFunction
			NOTE: The callback function should be expecting a HTTP urls, which isthe link to the requested image. 

		deleteImage(string:imageName)
			deletes a image from the storage